// Code generated by MockGen. DO NOT EDIT.
// Source: platform.go
//
// Generated by this command:
//
//	mockgen -destination mock/mock_platform.go -source platform.go
//

// Package mock_platform is a generated GoMock package.
package mock_platform

import (
	reflect "reflect"

	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
	helper "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/helper"
	plugin "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/plugins"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DiscoverBridges mocks base method.
func (m *MockInterface) DiscoverBridges() (v1.Bridges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverBridges")
	ret0, _ := ret[0].(v1.Bridges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverBridges indicates an expected call of DiscoverBridges.
func (mr *MockInterfaceMockRecorder) DiscoverBridges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverBridges", reflect.TypeOf((*MockInterface)(nil).DiscoverBridges))
}

// DiscoverSriovDevices mocks base method.
func (m *MockInterface) DiscoverSriovDevices() ([]v1.InterfaceExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSriovDevices")
	ret0, _ := ret[0].([]v1.InterfaceExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSriovDevices indicates an expected call of DiscoverSriovDevices.
func (mr *MockInterfaceMockRecorder) DiscoverSriovDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSriovDevices", reflect.TypeOf((*MockInterface)(nil).DiscoverSriovDevices))
}

// GetHostHelpers mocks base method.
func (m *MockInterface) GetHostHelpers() helper.HostHelpersInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostHelpers")
	ret0, _ := ret[0].(helper.HostHelpersInterface)
	return ret0
}

// GetHostHelpers indicates an expected call of GetHostHelpers.
func (mr *MockInterfaceMockRecorder) GetHostHelpers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostHelpers", reflect.TypeOf((*MockInterface)(nil).GetHostHelpers))
}

// GetPlugins mocks base method.
func (m *MockInterface) GetPlugins(ns *v1.SriovNetworkNodeState) (plugin.VendorPlugin, []plugin.VendorPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins", ns)
	ret0, _ := ret[0].(plugin.VendorPlugin)
	ret1, _ := ret[1].([]plugin.VendorPlugin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockInterfaceMockRecorder) GetPlugins(ns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockInterface)(nil).GetPlugins), ns)
}

// Init mocks base method.
func (m *MockInterface) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockInterfaceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init))
}

// SystemdGetPlugin mocks base method.
func (m *MockInterface) SystemdGetPlugin(phase string) (plugin.VendorPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemdGetPlugin", phase)
	ret0, _ := ret[0].(plugin.VendorPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemdGetPlugin indicates an expected call of SystemdGetPlugin.
func (mr *MockInterfaceMockRecorder) SystemdGetPlugin(phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemdGetPlugin", reflect.TypeOf((*MockInterface)(nil).SystemdGetPlugin), phase)
}
