// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -destination mock/mock_host.go -source manager.go
//

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
	store "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/host/store"
	types "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/host/types"
	netlink "github.com/vishvananda/netlink"
	gomock "go.uber.org/mock/gomock"
)

// MockHostManagerInterface is a mock of HostManagerInterface interface.
type MockHostManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHostManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockHostManagerInterfaceMockRecorder is the mock recorder for MockHostManagerInterface.
type MockHostManagerInterfaceMockRecorder struct {
	mock *MockHostManagerInterface
}

// NewMockHostManagerInterface creates a new mock instance.
func NewMockHostManagerInterface(ctrl *gomock.Controller) *MockHostManagerInterface {
	mock := &MockHostManagerInterface{ctrl: ctrl}
	mock.recorder = &MockHostManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostManagerInterface) EXPECT() *MockHostManagerInterfaceMockRecorder {
	return m.recorder
}

// AddDisableNMUdevRule mocks base method.
func (m *MockHostManagerInterface) AddDisableNMUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisableNMUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDisableNMUdevRule indicates an expected call of AddDisableNMUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) AddDisableNMUdevRule(pfPciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisableNMUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).AddDisableNMUdevRule), pfPciAddress)
}

// AddPersistPFNameUdevRule mocks base method.
func (m *MockHostManagerInterface) AddPersistPFNameUdevRule(pfPciAddress, pfName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPersistPFNameUdevRule", pfPciAddress, pfName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPersistPFNameUdevRule indicates an expected call of AddPersistPFNameUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) AddPersistPFNameUdevRule(pfPciAddress, pfName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPersistPFNameUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).AddPersistPFNameUdevRule), pfPciAddress, pfName)
}

// AddVfRepresentorUdevRule mocks base method.
func (m *MockHostManagerInterface) AddVfRepresentorUdevRule(pfPciAddress, pfName, pfSwitchID, pfSwitchPort string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVfRepresentorUdevRule", pfPciAddress, pfName, pfSwitchID, pfSwitchPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVfRepresentorUdevRule indicates an expected call of AddVfRepresentorUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) AddVfRepresentorUdevRule(pfPciAddress, pfName, pfSwitchID, pfSwitchPort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVfRepresentorUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).AddVfRepresentorUdevRule), pfPciAddress, pfName, pfSwitchID, pfSwitchPort)
}

// BindDefaultDriver mocks base method.
func (m *MockHostManagerInterface) BindDefaultDriver(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDefaultDriver", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDefaultDriver indicates an expected call of BindDefaultDriver.
func (mr *MockHostManagerInterfaceMockRecorder) BindDefaultDriver(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDefaultDriver", reflect.TypeOf((*MockHostManagerInterface)(nil).BindDefaultDriver), pciAddr)
}

// BindDpdkDriver mocks base method.
func (m *MockHostManagerInterface) BindDpdkDriver(pciAddr, driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDpdkDriver", pciAddr, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDpdkDriver indicates an expected call of BindDpdkDriver.
func (mr *MockHostManagerInterfaceMockRecorder) BindDpdkDriver(pciAddr, driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDpdkDriver", reflect.TypeOf((*MockHostManagerInterface)(nil).BindDpdkDriver), pciAddr, driver)
}

// BindDriverByBusAndDevice mocks base method.
func (m *MockHostManagerInterface) BindDriverByBusAndDevice(bus, device, driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDriverByBusAndDevice", bus, device, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDriverByBusAndDevice indicates an expected call of BindDriverByBusAndDevice.
func (mr *MockHostManagerInterfaceMockRecorder) BindDriverByBusAndDevice(bus, device, driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDriverByBusAndDevice", reflect.TypeOf((*MockHostManagerInterface)(nil).BindDriverByBusAndDevice), bus, device, driver)
}

// CheckRDMAEnabled mocks base method.
func (m *MockHostManagerInterface) CheckRDMAEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRDMAEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRDMAEnabled indicates an expected call of CheckRDMAEnabled.
func (mr *MockHostManagerInterfaceMockRecorder) CheckRDMAEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRDMAEnabled", reflect.TypeOf((*MockHostManagerInterface)(nil).CheckRDMAEnabled))
}

// CleanSriovFilesFromHost mocks base method.
func (m *MockHostManagerInterface) CleanSriovFilesFromHost(isOpenShift bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSriovFilesFromHost", isOpenShift)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanSriovFilesFromHost indicates an expected call of CleanSriovFilesFromHost.
func (mr *MockHostManagerInterfaceMockRecorder) CleanSriovFilesFromHost(isOpenShift any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSriovFilesFromHost", reflect.TypeOf((*MockHostManagerInterface)(nil).CleanSriovFilesFromHost), isOpenShift)
}

// CompareServices mocks base method.
func (m *MockHostManagerInterface) CompareServices(serviceA, serviceB *types.Service) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareServices", serviceA, serviceB)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareServices indicates an expected call of CompareServices.
func (mr *MockHostManagerInterfaceMockRecorder) CompareServices(serviceA, serviceB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareServices", reflect.TypeOf((*MockHostManagerInterface)(nil).CompareServices), serviceA, serviceB)
}

// ConfigSriovDeviceVirtual mocks base method.
func (m *MockHostManagerInterface) ConfigSriovDeviceVirtual(iface *v1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovDeviceVirtual", iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovDeviceVirtual indicates an expected call of ConfigSriovDeviceVirtual.
func (mr *MockHostManagerInterfaceMockRecorder) ConfigSriovDeviceVirtual(iface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovDeviceVirtual", reflect.TypeOf((*MockHostManagerInterface)(nil).ConfigSriovDeviceVirtual), iface)
}

// ConfigSriovInterfaces mocks base method.
func (m *MockHostManagerInterface) ConfigSriovInterfaces(storeManager store.ManagerInterface, interfaces []v1.Interface, ifaceStatuses []v1.InterfaceExt, skipVFConfiguration bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovInterfaces", storeManager, interfaces, ifaceStatuses, skipVFConfiguration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovInterfaces indicates an expected call of ConfigSriovInterfaces.
func (mr *MockHostManagerInterfaceMockRecorder) ConfigSriovInterfaces(storeManager, interfaces, ifaceStatuses, skipVFConfiguration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovInterfaces", reflect.TypeOf((*MockHostManagerInterface)(nil).ConfigSriovInterfaces), storeManager, interfaces, ifaceStatuses, skipVFConfiguration)
}

// ConfigureBridges mocks base method.
func (m *MockHostManagerInterface) ConfigureBridges(bridgesSpec, bridgesStatus v1.Bridges) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureBridges", bridgesSpec, bridgesStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureBridges indicates an expected call of ConfigureBridges.
func (mr *MockHostManagerInterfaceMockRecorder) ConfigureBridges(bridgesSpec, bridgesStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureBridges", reflect.TypeOf((*MockHostManagerInterface)(nil).ConfigureBridges), bridgesSpec, bridgesStatus)
}

// ConfigureVfGUID mocks base method.
func (m *MockHostManagerInterface) ConfigureVfGUID(vfAddr, pfAddr string, vfID int, pfLink netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVfGUID", vfAddr, pfAddr, vfID, pfLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureVfGUID indicates an expected call of ConfigureVfGUID.
func (mr *MockHostManagerInterfaceMockRecorder) ConfigureVfGUID(vfAddr, pfAddr, vfID, pfLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVfGUID", reflect.TypeOf((*MockHostManagerInterface)(nil).ConfigureVfGUID), vfAddr, pfAddr, vfID, pfLink)
}

// CreateVDPADevice mocks base method.
func (m *MockHostManagerInterface) CreateVDPADevice(pciAddr, vdpaType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVDPADevice", pciAddr, vdpaType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVDPADevice indicates an expected call of CreateVDPADevice.
func (mr *MockHostManagerInterfaceMockRecorder) CreateVDPADevice(pciAddr, vdpaType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVDPADevice", reflect.TypeOf((*MockHostManagerInterface)(nil).CreateVDPADevice), pciAddr, vdpaType)
}

// DeleteVDPADevice mocks base method.
func (m *MockHostManagerInterface) DeleteVDPADevice(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVDPADevice", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVDPADevice indicates an expected call of DeleteVDPADevice.
func (mr *MockHostManagerInterfaceMockRecorder) DeleteVDPADevice(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVDPADevice", reflect.TypeOf((*MockHostManagerInterface)(nil).DeleteVDPADevice), pciAddr)
}

// DetachInterfaceFromManagedBridge mocks base method.
func (m *MockHostManagerInterface) DetachInterfaceFromManagedBridge(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInterfaceFromManagedBridge", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachInterfaceFromManagedBridge indicates an expected call of DetachInterfaceFromManagedBridge.
func (mr *MockHostManagerInterfaceMockRecorder) DetachInterfaceFromManagedBridge(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInterfaceFromManagedBridge", reflect.TypeOf((*MockHostManagerInterface)(nil).DetachInterfaceFromManagedBridge), pciAddr)
}

// DiscoverBridges mocks base method.
func (m *MockHostManagerInterface) DiscoverBridges() (v1.Bridges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverBridges")
	ret0, _ := ret[0].(v1.Bridges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverBridges indicates an expected call of DiscoverBridges.
func (mr *MockHostManagerInterfaceMockRecorder) DiscoverBridges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverBridges", reflect.TypeOf((*MockHostManagerInterface)(nil).DiscoverBridges))
}

// DiscoverRDMASubsystem mocks base method.
func (m *MockHostManagerInterface) DiscoverRDMASubsystem() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverRDMASubsystem")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverRDMASubsystem indicates an expected call of DiscoverRDMASubsystem.
func (mr *MockHostManagerInterfaceMockRecorder) DiscoverRDMASubsystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverRDMASubsystem", reflect.TypeOf((*MockHostManagerInterface)(nil).DiscoverRDMASubsystem))
}

// DiscoverSriovDevices mocks base method.
func (m *MockHostManagerInterface) DiscoverSriovDevices(storeManager store.ManagerInterface) ([]v1.InterfaceExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSriovDevices", storeManager)
	ret0, _ := ret[0].([]v1.InterfaceExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSriovDevices indicates an expected call of DiscoverSriovDevices.
func (mr *MockHostManagerInterfaceMockRecorder) DiscoverSriovDevices(storeManager any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSriovDevices", reflect.TypeOf((*MockHostManagerInterface)(nil).DiscoverSriovDevices), storeManager)
}

// DiscoverVDPAType mocks base method.
func (m *MockHostManagerInterface) DiscoverVDPAType(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverVDPAType", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// DiscoverVDPAType indicates an expected call of DiscoverVDPAType.
func (mr *MockHostManagerInterfaceMockRecorder) DiscoverVDPAType(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverVDPAType", reflect.TypeOf((*MockHostManagerInterface)(nil).DiscoverVDPAType), pciAddr)
}

// EnableHwTcOffload mocks base method.
func (m *MockHostManagerInterface) EnableHwTcOffload(ifaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableHwTcOffload", ifaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableHwTcOffload indicates an expected call of EnableHwTcOffload.
func (mr *MockHostManagerInterfaceMockRecorder) EnableHwTcOffload(ifaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableHwTcOffload", reflect.TypeOf((*MockHostManagerInterface)(nil).EnableHwTcOffload), ifaceName)
}

// EnableService mocks base method.
func (m *MockHostManagerInterface) EnableService(service *types.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableService", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableService indicates an expected call of EnableService.
func (mr *MockHostManagerInterfaceMockRecorder) EnableService(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableService", reflect.TypeOf((*MockHostManagerInterface)(nil).EnableService), service)
}

// GetCPUVendor mocks base method.
func (m *MockHostManagerInterface) GetCPUVendor() (types.CPUVendor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUVendor")
	ret0, _ := ret[0].(types.CPUVendor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUVendor indicates an expected call of GetCPUVendor.
func (mr *MockHostManagerInterfaceMockRecorder) GetCPUVendor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUVendor", reflect.TypeOf((*MockHostManagerInterface)(nil).GetCPUVendor))
}

// GetCurrentKernelArgs mocks base method.
func (m *MockHostManagerInterface) GetCurrentKernelArgs() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKernelArgs")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKernelArgs indicates an expected call of GetCurrentKernelArgs.
func (mr *MockHostManagerInterfaceMockRecorder) GetCurrentKernelArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKernelArgs", reflect.TypeOf((*MockHostManagerInterface)(nil).GetCurrentKernelArgs))
}

// GetDevlinkDeviceParam mocks base method.
func (m *MockHostManagerInterface) GetDevlinkDeviceParam(pciAddr, paramName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevlinkDeviceParam", pciAddr, paramName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevlinkDeviceParam indicates an expected call of GetDevlinkDeviceParam.
func (mr *MockHostManagerInterfaceMockRecorder) GetDevlinkDeviceParam(pciAddr, paramName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevlinkDeviceParam", reflect.TypeOf((*MockHostManagerInterface)(nil).GetDevlinkDeviceParam), pciAddr, paramName)
}

// GetDriverByBusAndDevice mocks base method.
func (m *MockHostManagerInterface) GetDriverByBusAndDevice(bus, device string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByBusAndDevice", bus, device)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverByBusAndDevice indicates an expected call of GetDriverByBusAndDevice.
func (mr *MockHostManagerInterfaceMockRecorder) GetDriverByBusAndDevice(bus, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByBusAndDevice", reflect.TypeOf((*MockHostManagerInterface)(nil).GetDriverByBusAndDevice), bus, device)
}

// GetInterfaceIndex mocks base method.
func (m *MockHostManagerInterface) GetInterfaceIndex(pciAddr string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceIndex", pciAddr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterfaceIndex indicates an expected call of GetInterfaceIndex.
func (mr *MockHostManagerInterfaceMockRecorder) GetInterfaceIndex(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceIndex", reflect.TypeOf((*MockHostManagerInterface)(nil).GetInterfaceIndex), pciAddr)
}

// GetInterfaces mocks base method.
func (m *MockHostManagerInterface) GetInterfaces() ([]v1.InterfaceExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaces")
	ret0, _ := ret[0].([]v1.InterfaceExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterfaces indicates an expected call of GetInterfaces.
func (mr *MockHostManagerInterfaceMockRecorder) GetInterfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaces", reflect.TypeOf((*MockHostManagerInterface)(nil).GetInterfaces))
}

// GetLinkType mocks base method.
func (m *MockHostManagerInterface) GetLinkType(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkType", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLinkType indicates an expected call of GetLinkType.
func (mr *MockHostManagerInterfaceMockRecorder) GetLinkType(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkType", reflect.TypeOf((*MockHostManagerInterface)(nil).GetLinkType), name)
}

// GetNetDevLinkAdminState mocks base method.
func (m *MockHostManagerInterface) GetNetDevLinkAdminState(ifaceName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevLinkAdminState", ifaceName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevLinkAdminState indicates an expected call of GetNetDevLinkAdminState.
func (mr *MockHostManagerInterfaceMockRecorder) GetNetDevLinkAdminState(ifaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevLinkAdminState", reflect.TypeOf((*MockHostManagerInterface)(nil).GetNetDevLinkAdminState), ifaceName)
}

// GetNetDevLinkSpeed mocks base method.
func (m *MockHostManagerInterface) GetNetDevLinkSpeed(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevLinkSpeed", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevLinkSpeed indicates an expected call of GetNetDevLinkSpeed.
func (mr *MockHostManagerInterfaceMockRecorder) GetNetDevLinkSpeed(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevLinkSpeed", reflect.TypeOf((*MockHostManagerInterface)(nil).GetNetDevLinkSpeed), name)
}

// GetNetDevMac mocks base method.
func (m *MockHostManagerInterface) GetNetDevMac(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevMac", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevMac indicates an expected call of GetNetDevMac.
func (mr *MockHostManagerInterfaceMockRecorder) GetNetDevMac(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevMac", reflect.TypeOf((*MockHostManagerInterface)(nil).GetNetDevMac), name)
}

// GetNetDevNodeGUID mocks base method.
func (m *MockHostManagerInterface) GetNetDevNodeGUID(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevNodeGUID", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevNodeGUID indicates an expected call of GetNetDevNodeGUID.
func (mr *MockHostManagerInterfaceMockRecorder) GetNetDevNodeGUID(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevNodeGUID", reflect.TypeOf((*MockHostManagerInterface)(nil).GetNetDevNodeGUID), pciAddr)
}

// GetNetdevMTU mocks base method.
func (m *MockHostManagerInterface) GetNetdevMTU(pciAddr string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetdevMTU", pciAddr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNetdevMTU indicates an expected call of GetNetdevMTU.
func (mr *MockHostManagerInterfaceMockRecorder) GetNetdevMTU(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetdevMTU", reflect.TypeOf((*MockHostManagerInterface)(nil).GetNetdevMTU), pciAddr)
}

// GetNicSriovMode mocks base method.
func (m *MockHostManagerInterface) GetNicSriovMode(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNicSriovMode", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNicSriovMode indicates an expected call of GetNicSriovMode.
func (mr *MockHostManagerInterfaceMockRecorder) GetNicSriovMode(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNicSriovMode", reflect.TypeOf((*MockHostManagerInterface)(nil).GetNicSriovMode), pciAddr)
}

// GetPciAddressFromInterfaceName mocks base method.
func (m *MockHostManagerInterface) GetPciAddressFromInterfaceName(interfaceName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPciAddressFromInterfaceName", interfaceName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPciAddressFromInterfaceName indicates an expected call of GetPciAddressFromInterfaceName.
func (mr *MockHostManagerInterfaceMockRecorder) GetPciAddressFromInterfaceName(interfaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPciAddressFromInterfaceName", reflect.TypeOf((*MockHostManagerInterface)(nil).GetPciAddressFromInterfaceName), interfaceName)
}

// GetPhysPortName mocks base method.
func (m *MockHostManagerInterface) GetPhysPortName(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysPortName", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhysPortName indicates an expected call of GetPhysPortName.
func (mr *MockHostManagerInterfaceMockRecorder) GetPhysPortName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysPortName", reflect.TypeOf((*MockHostManagerInterface)(nil).GetPhysPortName), name)
}

// GetPhysSwitchID mocks base method.
func (m *MockHostManagerInterface) GetPhysSwitchID(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysSwitchID", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhysSwitchID indicates an expected call of GetPhysSwitchID.
func (mr *MockHostManagerInterfaceMockRecorder) GetPhysSwitchID(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysSwitchID", reflect.TypeOf((*MockHostManagerInterface)(nil).GetPhysSwitchID), name)
}

// HasDriver mocks base method.
func (m *MockHostManagerInterface) HasDriver(pciAddr string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDriver", pciAddr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// HasDriver indicates an expected call of HasDriver.
func (mr *MockHostManagerInterfaceMockRecorder) HasDriver(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDriver", reflect.TypeOf((*MockHostManagerInterface)(nil).HasDriver), pciAddr)
}

// IsKernelArgsSet mocks base method.
func (m *MockHostManagerInterface) IsKernelArgsSet(cmdLine, karg string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelArgsSet", cmdLine, karg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelArgsSet indicates an expected call of IsKernelArgsSet.
func (mr *MockHostManagerInterfaceMockRecorder) IsKernelArgsSet(cmdLine, karg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelArgsSet", reflect.TypeOf((*MockHostManagerInterface)(nil).IsKernelArgsSet), cmdLine, karg)
}

// IsKernelLockdownMode mocks base method.
func (m *MockHostManagerInterface) IsKernelLockdownMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelLockdownMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelLockdownMode indicates an expected call of IsKernelLockdownMode.
func (mr *MockHostManagerInterfaceMockRecorder) IsKernelLockdownMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelLockdownMode", reflect.TypeOf((*MockHostManagerInterface)(nil).IsKernelLockdownMode))
}

// IsKernelModuleLoaded mocks base method.
func (m *MockHostManagerInterface) IsKernelModuleLoaded(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelModuleLoaded", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKernelModuleLoaded indicates an expected call of IsKernelModuleLoaded.
func (mr *MockHostManagerInterfaceMockRecorder) IsKernelModuleLoaded(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelModuleLoaded", reflect.TypeOf((*MockHostManagerInterface)(nil).IsKernelModuleLoaded), name)
}

// IsServiceEnabled mocks base method.
func (m *MockHostManagerInterface) IsServiceEnabled(servicePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceEnabled", servicePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceEnabled indicates an expected call of IsServiceEnabled.
func (mr *MockHostManagerInterfaceMockRecorder) IsServiceEnabled(servicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceEnabled", reflect.TypeOf((*MockHostManagerInterface)(nil).IsServiceEnabled), servicePath)
}

// IsServiceExist mocks base method.
func (m *MockHostManagerInterface) IsServiceExist(servicePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceExist", servicePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceExist indicates an expected call of IsServiceExist.
func (mr *MockHostManagerInterfaceMockRecorder) IsServiceExist(servicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceExist", reflect.TypeOf((*MockHostManagerInterface)(nil).IsServiceExist), servicePath)
}

// IsSwitchdev mocks base method.
func (m *MockHostManagerInterface) IsSwitchdev(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSwitchdev", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSwitchdev indicates an expected call of IsSwitchdev.
func (mr *MockHostManagerInterfaceMockRecorder) IsSwitchdev(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSwitchdev", reflect.TypeOf((*MockHostManagerInterface)(nil).IsSwitchdev), name)
}

// LoadKernelModule mocks base method.
func (m *MockHostManagerInterface) LoadKernelModule(name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadKernelModule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockHostManagerInterfaceMockRecorder) LoadKernelModule(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockHostManagerInterface)(nil).LoadKernelModule), varargs...)
}

// LoadUdevRules mocks base method.
func (m *MockHostManagerInterface) LoadUdevRules() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUdevRules")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadUdevRules indicates an expected call of LoadUdevRules.
func (mr *MockHostManagerInterfaceMockRecorder) LoadUdevRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUdevRules", reflect.TypeOf((*MockHostManagerInterface)(nil).LoadUdevRules))
}

// PrepareNMUdevRule mocks base method.
func (m *MockHostManagerInterface) PrepareNMUdevRule() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNMUdevRule")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareNMUdevRule indicates an expected call of PrepareNMUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) PrepareNMUdevRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNMUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).PrepareNMUdevRule))
}

// PrepareVFRepUdevRule mocks base method.
func (m *MockHostManagerInterface) PrepareVFRepUdevRule() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareVFRepUdevRule")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareVFRepUdevRule indicates an expected call of PrepareVFRepUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) PrepareVFRepUdevRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareVFRepUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).PrepareVFRepUdevRule))
}

// ReadConfFile mocks base method.
func (m *MockHostManagerInterface) ReadConfFile() (*types.SriovConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfFile")
	ret0, _ := ret[0].(*types.SriovConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfFile indicates an expected call of ReadConfFile.
func (mr *MockHostManagerInterfaceMockRecorder) ReadConfFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfFile", reflect.TypeOf((*MockHostManagerInterface)(nil).ReadConfFile))
}

// ReadService mocks base method.
func (m *MockHostManagerInterface) ReadService(servicePath string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadService", servicePath)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService.
func (mr *MockHostManagerInterfaceMockRecorder) ReadService(servicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockHostManagerInterface)(nil).ReadService), servicePath)
}

// ReadServiceInjectionManifestFile mocks base method.
func (m *MockHostManagerInterface) ReadServiceInjectionManifestFile(path string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceInjectionManifestFile", path)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceInjectionManifestFile indicates an expected call of ReadServiceInjectionManifestFile.
func (mr *MockHostManagerInterfaceMockRecorder) ReadServiceInjectionManifestFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceInjectionManifestFile", reflect.TypeOf((*MockHostManagerInterface)(nil).ReadServiceInjectionManifestFile), path)
}

// ReadServiceManifestFile mocks base method.
func (m *MockHostManagerInterface) ReadServiceManifestFile(path string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifestFile", path)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifestFile indicates an expected call of ReadServiceManifestFile.
func (mr *MockHostManagerInterfaceMockRecorder) ReadServiceManifestFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifestFile", reflect.TypeOf((*MockHostManagerInterface)(nil).ReadServiceManifestFile), path)
}

// ReadSriovResult mocks base method.
func (m *MockHostManagerInterface) ReadSriovResult() (*types.SriovResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSriovResult")
	ret0, _ := ret[0].(*types.SriovResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSriovResult indicates an expected call of ReadSriovResult.
func (mr *MockHostManagerInterfaceMockRecorder) ReadSriovResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSriovResult", reflect.TypeOf((*MockHostManagerInterface)(nil).ReadSriovResult))
}

// ReadSriovSupportedNics mocks base method.
func (m *MockHostManagerInterface) ReadSriovSupportedNics() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSriovSupportedNics")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSriovSupportedNics indicates an expected call of ReadSriovSupportedNics.
func (mr *MockHostManagerInterfaceMockRecorder) ReadSriovSupportedNics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSriovSupportedNics", reflect.TypeOf((*MockHostManagerInterface)(nil).ReadSriovSupportedNics))
}

// RebindVfToDefaultDriver mocks base method.
func (m *MockHostManagerInterface) RebindVfToDefaultDriver(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebindVfToDefaultDriver", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebindVfToDefaultDriver indicates an expected call of RebindVfToDefaultDriver.
func (mr *MockHostManagerInterfaceMockRecorder) RebindVfToDefaultDriver(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebindVfToDefaultDriver", reflect.TypeOf((*MockHostManagerInterface)(nil).RebindVfToDefaultDriver), pciAddr)
}

// RemoveDisableNMUdevRule mocks base method.
func (m *MockHostManagerInterface) RemoveDisableNMUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDisableNMUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDisableNMUdevRule indicates an expected call of RemoveDisableNMUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) RemoveDisableNMUdevRule(pfPciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDisableNMUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).RemoveDisableNMUdevRule), pfPciAddress)
}

// RemovePersistPFNameUdevRule mocks base method.
func (m *MockHostManagerInterface) RemovePersistPFNameUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePersistPFNameUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePersistPFNameUdevRule indicates an expected call of RemovePersistPFNameUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) RemovePersistPFNameUdevRule(pfPciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePersistPFNameUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).RemovePersistPFNameUdevRule), pfPciAddress)
}

// RemoveSriovResult mocks base method.
func (m *MockHostManagerInterface) RemoveSriovResult() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSriovResult")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSriovResult indicates an expected call of RemoveSriovResult.
func (mr *MockHostManagerInterfaceMockRecorder) RemoveSriovResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSriovResult", reflect.TypeOf((*MockHostManagerInterface)(nil).RemoveSriovResult))
}

// RemoveVfRepresentorUdevRule mocks base method.
func (m *MockHostManagerInterface) RemoveVfRepresentorUdevRule(pfPciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVfRepresentorUdevRule", pfPciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVfRepresentorUdevRule indicates an expected call of RemoveVfRepresentorUdevRule.
func (mr *MockHostManagerInterfaceMockRecorder) RemoveVfRepresentorUdevRule(pfPciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVfRepresentorUdevRule", reflect.TypeOf((*MockHostManagerInterface)(nil).RemoveVfRepresentorUdevRule), pfPciAddress)
}

// ResetSriovDevice mocks base method.
func (m *MockHostManagerInterface) ResetSriovDevice(ifaceStatus v1.InterfaceExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSriovDevice", ifaceStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetSriovDevice indicates an expected call of ResetSriovDevice.
func (mr *MockHostManagerInterfaceMockRecorder) ResetSriovDevice(ifaceStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSriovDevice", reflect.TypeOf((*MockHostManagerInterface)(nil).ResetSriovDevice), ifaceStatus)
}

// SetDevlinkDeviceParam mocks base method.
func (m *MockHostManagerInterface) SetDevlinkDeviceParam(pciAddr, paramName, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevlinkDeviceParam", pciAddr, paramName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevlinkDeviceParam indicates an expected call of SetDevlinkDeviceParam.
func (mr *MockHostManagerInterfaceMockRecorder) SetDevlinkDeviceParam(pciAddr, paramName, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevlinkDeviceParam", reflect.TypeOf((*MockHostManagerInterface)(nil).SetDevlinkDeviceParam), pciAddr, paramName, value)
}

// SetNetdevMTU mocks base method.
func (m *MockHostManagerInterface) SetNetdevMTU(pciAddr string, mtu int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNetdevMTU", pciAddr, mtu)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNetdevMTU indicates an expected call of SetNetdevMTU.
func (mr *MockHostManagerInterfaceMockRecorder) SetNetdevMTU(pciAddr, mtu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetdevMTU", reflect.TypeOf((*MockHostManagerInterface)(nil).SetNetdevMTU), pciAddr, mtu)
}

// SetNicSriovMode mocks base method.
func (m *MockHostManagerInterface) SetNicSriovMode(pciAddr, mode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNicSriovMode", pciAddr, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNicSriovMode indicates an expected call of SetNicSriovMode.
func (mr *MockHostManagerInterfaceMockRecorder) SetNicSriovMode(pciAddr, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNicSriovMode", reflect.TypeOf((*MockHostManagerInterface)(nil).SetNicSriovMode), pciAddr, mode)
}

// SetRDMASubsystem mocks base method.
func (m *MockHostManagerInterface) SetRDMASubsystem(mode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRDMASubsystem", mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRDMASubsystem indicates an expected call of SetRDMASubsystem.
func (mr *MockHostManagerInterfaceMockRecorder) SetRDMASubsystem(mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRDMASubsystem", reflect.TypeOf((*MockHostManagerInterface)(nil).SetRDMASubsystem), mode)
}

// SetSriovNumVfs mocks base method.
func (m *MockHostManagerInterface) SetSriovNumVfs(pciAddr string, numVfs int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSriovNumVfs", pciAddr, numVfs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSriovNumVfs indicates an expected call of SetSriovNumVfs.
func (mr *MockHostManagerInterfaceMockRecorder) SetSriovNumVfs(pciAddr, numVfs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSriovNumVfs", reflect.TypeOf((*MockHostManagerInterface)(nil).SetSriovNumVfs), pciAddr, numVfs)
}

// SetVfAdminMac mocks base method.
func (m *MockHostManagerInterface) SetVfAdminMac(vfAddr string, pfLink, vfLink netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVfAdminMac", vfAddr, pfLink, vfLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVfAdminMac indicates an expected call of SetVfAdminMac.
func (mr *MockHostManagerInterfaceMockRecorder) SetVfAdminMac(vfAddr, pfLink, vfLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVfAdminMac", reflect.TypeOf((*MockHostManagerInterface)(nil).SetVfAdminMac), vfAddr, pfLink, vfLink)
}

// TryEnableTun mocks base method.
func (m *MockHostManagerInterface) TryEnableTun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableTun")
}

// TryEnableTun indicates an expected call of TryEnableTun.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableTun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableTun", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableTun))
}

// TryEnableVhostNet mocks base method.
func (m *MockHostManagerInterface) TryEnableVhostNet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableVhostNet")
}

// TryEnableVhostNet indicates an expected call of TryEnableVhostNet.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableVhostNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableVhostNet", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableVhostNet))
}

// TryGetInterfaceName mocks base method.
func (m *MockHostManagerInterface) TryGetInterfaceName(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryGetInterfaceName", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryGetInterfaceName indicates an expected call of TryGetInterfaceName.
func (mr *MockHostManagerInterfaceMockRecorder) TryGetInterfaceName(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetInterfaceName", reflect.TypeOf((*MockHostManagerInterface)(nil).TryGetInterfaceName), pciAddr)
}

// TryToGetVirtualInterfaceName mocks base method.
func (m *MockHostManagerInterface) TryToGetVirtualInterfaceName(pciAddr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToGetVirtualInterfaceName", pciAddr)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryToGetVirtualInterfaceName indicates an expected call of TryToGetVirtualInterfaceName.
func (mr *MockHostManagerInterfaceMockRecorder) TryToGetVirtualInterfaceName(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToGetVirtualInterfaceName", reflect.TypeOf((*MockHostManagerInterface)(nil).TryToGetVirtualInterfaceName), pciAddr)
}

// Unbind mocks base method.
func (m *MockHostManagerInterface) Unbind(pciAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", pciAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unbind indicates an expected call of Unbind.
func (mr *MockHostManagerInterfaceMockRecorder) Unbind(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockHostManagerInterface)(nil).Unbind), pciAddr)
}

// UnbindDriverByBusAndDevice mocks base method.
func (m *MockHostManagerInterface) UnbindDriverByBusAndDevice(bus, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverByBusAndDevice", bus, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverByBusAndDevice indicates an expected call of UnbindDriverByBusAndDevice.
func (mr *MockHostManagerInterfaceMockRecorder) UnbindDriverByBusAndDevice(bus, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverByBusAndDevice", reflect.TypeOf((*MockHostManagerInterface)(nil).UnbindDriverByBusAndDevice), bus, device)
}

// UnbindDriverIfNeeded mocks base method.
func (m *MockHostManagerInterface) UnbindDriverIfNeeded(pciAddr string, isRdma bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverIfNeeded", pciAddr, isRdma)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverIfNeeded indicates an expected call of UnbindDriverIfNeeded.
func (mr *MockHostManagerInterfaceMockRecorder) UnbindDriverIfNeeded(pciAddr, isRdma any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverIfNeeded", reflect.TypeOf((*MockHostManagerInterface)(nil).UnbindDriverIfNeeded), pciAddr, isRdma)
}

// UpdateSystemService mocks base method.
func (m *MockHostManagerInterface) UpdateSystemService(serviceObj *types.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemService", serviceObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSystemService indicates an expected call of UpdateSystemService.
func (mr *MockHostManagerInterfaceMockRecorder) UpdateSystemService(serviceObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemService", reflect.TypeOf((*MockHostManagerInterface)(nil).UpdateSystemService), serviceObj)
}

// VFIsReady mocks base method.
func (m *MockHostManagerInterface) VFIsReady(pciAddr string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VFIsReady", pciAddr)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VFIsReady indicates an expected call of VFIsReady.
func (mr *MockHostManagerInterfaceMockRecorder) VFIsReady(pciAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VFIsReady", reflect.TypeOf((*MockHostManagerInterface)(nil).VFIsReady), pciAddr)
}

// WaitUdevEventsProcessed mocks base method.
func (m *MockHostManagerInterface) WaitUdevEventsProcessed(timeout int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUdevEventsProcessed", timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUdevEventsProcessed indicates an expected call of WaitUdevEventsProcessed.
func (mr *MockHostManagerInterfaceMockRecorder) WaitUdevEventsProcessed(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUdevEventsProcessed", reflect.TypeOf((*MockHostManagerInterface)(nil).WaitUdevEventsProcessed), timeout)
}

// WriteConfFile mocks base method.
func (m *MockHostManagerInterface) WriteConfFile(newState *v1.SriovNetworkNodeState) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConfFile", newState)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteConfFile indicates an expected call of WriteConfFile.
func (mr *MockHostManagerInterfaceMockRecorder) WriteConfFile(newState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConfFile", reflect.TypeOf((*MockHostManagerInterface)(nil).WriteConfFile), newState)
}

// WriteSriovResult mocks base method.
func (m *MockHostManagerInterface) WriteSriovResult(result *types.SriovResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSriovResult", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSriovResult indicates an expected call of WriteSriovResult.
func (mr *MockHostManagerInterfaceMockRecorder) WriteSriovResult(result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSriovResult", reflect.TypeOf((*MockHostManagerInterface)(nil).WriteSriovResult), result)
}

// WriteSriovSupportedNics mocks base method.
func (m *MockHostManagerInterface) WriteSriovSupportedNics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSriovSupportedNics")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSriovSupportedNics indicates an expected call of WriteSriovSupportedNics.
func (mr *MockHostManagerInterfaceMockRecorder) WriteSriovSupportedNics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSriovSupportedNics", reflect.TypeOf((*MockHostManagerInterface)(nil).WriteSriovSupportedNics))
}
