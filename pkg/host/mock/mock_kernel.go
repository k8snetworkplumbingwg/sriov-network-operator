// Code generated by MockGen. DO NOT EDIT.
// Source: kernel.go

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKernelInterface is a mock of KernelInterface interface.
type MockKernelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKernelInterfaceMockRecorder
}

// MockKernelInterfaceMockRecorder is the mock recorder for MockKernelInterface.
type MockKernelInterfaceMockRecorder struct {
	mock *MockKernelInterface
}

// NewMockKernelInterface creates a new mock instance.
func NewMockKernelInterface(ctrl *gomock.Controller) *MockKernelInterface {
	mock := &MockKernelInterface{ctrl: ctrl}
	mock.recorder = &MockKernelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelInterface) EXPECT() *MockKernelInterfaceMockRecorder {
	return m.recorder
}

// BindDefaultDriver mocks base method.
func (m *MockKernelInterface) BindDefaultDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDefaultDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDefaultDriver indicates an expected call of BindDefaultDriver.
func (mr *MockKernelInterfaceMockRecorder) BindDefaultDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDefaultDriver", reflect.TypeOf((*MockKernelInterface)(nil).BindDefaultDriver), arg0)
}

// BindDpdkDriver mocks base method.
func (m *MockKernelInterface) BindDpdkDriver(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDpdkDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDpdkDriver indicates an expected call of BindDpdkDriver.
func (mr *MockKernelInterfaceMockRecorder) BindDpdkDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDpdkDriver", reflect.TypeOf((*MockKernelInterface)(nil).BindDpdkDriver), arg0, arg1)
}

// BindDriverByBusAndDevice mocks base method.
func (m *MockKernelInterface) BindDriverByBusAndDevice(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDriverByBusAndDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDriverByBusAndDevice indicates an expected call of BindDriverByBusAndDevice.
func (mr *MockKernelInterfaceMockRecorder) BindDriverByBusAndDevice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDriverByBusAndDevice", reflect.TypeOf((*MockKernelInterface)(nil).BindDriverByBusAndDevice), arg0, arg1, arg2)
}

// EnableRDMA mocks base method.
func (m *MockKernelInterface) EnableRDMA(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMA", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMA indicates an expected call of EnableRDMA.
func (mr *MockKernelInterfaceMockRecorder) EnableRDMA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMA", reflect.TypeOf((*MockKernelInterface)(nil).EnableRDMA), arg0, arg1, arg2)
}

// EnableRDMAOnRHELMachine mocks base method.
func (m *MockKernelInterface) EnableRDMAOnRHELMachine() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMAOnRHELMachine")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMAOnRHELMachine indicates an expected call of EnableRDMAOnRHELMachine.
func (mr *MockKernelInterfaceMockRecorder) EnableRDMAOnRHELMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMAOnRHELMachine", reflect.TypeOf((*MockKernelInterface)(nil).EnableRDMAOnRHELMachine))
}

// GetCurrentKernelArgs mocks base method.
func (m *MockKernelInterface) GetCurrentKernelArgs() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKernelArgs")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKernelArgs indicates an expected call of GetCurrentKernelArgs.
func (mr *MockKernelInterfaceMockRecorder) GetCurrentKernelArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKernelArgs", reflect.TypeOf((*MockKernelInterface)(nil).GetCurrentKernelArgs))
}

// GetOSPrettyName mocks base method.
func (m *MockKernelInterface) GetOSPrettyName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSPrettyName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSPrettyName indicates an expected call of GetOSPrettyName.
func (mr *MockKernelInterfaceMockRecorder) GetOSPrettyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSPrettyName", reflect.TypeOf((*MockKernelInterface)(nil).GetOSPrettyName))
}

// HasDriver mocks base method.
func (m *MockKernelInterface) HasDriver(arg0 string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDriver", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// HasDriver indicates an expected call of HasDriver.
func (mr *MockKernelInterfaceMockRecorder) HasDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDriver", reflect.TypeOf((*MockKernelInterface)(nil).HasDriver), arg0)
}

// InstallRDMA mocks base method.
func (m *MockKernelInterface) InstallRDMA(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallRDMA", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallRDMA indicates an expected call of InstallRDMA.
func (mr *MockKernelInterfaceMockRecorder) InstallRDMA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallRDMA", reflect.TypeOf((*MockKernelInterface)(nil).InstallRDMA), arg0)
}

// IsCoreOS mocks base method.
func (m *MockKernelInterface) IsCoreOS() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCoreOS")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCoreOS indicates an expected call of IsCoreOS.
func (mr *MockKernelInterfaceMockRecorder) IsCoreOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCoreOS", reflect.TypeOf((*MockKernelInterface)(nil).IsCoreOS))
}

// IsKernelArgsSet mocks base method.
func (m *MockKernelInterface) IsKernelArgsSet(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelArgsSet", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelArgsSet indicates an expected call of IsKernelArgsSet.
func (mr *MockKernelInterfaceMockRecorder) IsKernelArgsSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelArgsSet", reflect.TypeOf((*MockKernelInterface)(nil).IsKernelArgsSet), arg0, arg1)
}

// IsKernelLockdownMode mocks base method.
func (m *MockKernelInterface) IsKernelLockdownMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelLockdownMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelLockdownMode indicates an expected call of IsKernelLockdownMode.
func (mr *MockKernelInterfaceMockRecorder) IsKernelLockdownMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelLockdownMode", reflect.TypeOf((*MockKernelInterface)(nil).IsKernelLockdownMode))
}

// IsKernelModuleLoaded mocks base method.
func (m *MockKernelInterface) IsKernelModuleLoaded(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelModuleLoaded", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKernelModuleLoaded indicates an expected call of IsKernelModuleLoaded.
func (mr *MockKernelInterfaceMockRecorder) IsKernelModuleLoaded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelModuleLoaded", reflect.TypeOf((*MockKernelInterface)(nil).IsKernelModuleLoaded), arg0)
}

// IsRHELSystem mocks base method.
func (m *MockKernelInterface) IsRHELSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRHELSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRHELSystem indicates an expected call of IsRHELSystem.
func (mr *MockKernelInterfaceMockRecorder) IsRHELSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRHELSystem", reflect.TypeOf((*MockKernelInterface)(nil).IsRHELSystem))
}

// IsUbuntuSystem mocks base method.
func (m *MockKernelInterface) IsUbuntuSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUbuntuSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUbuntuSystem indicates an expected call of IsUbuntuSystem.
func (mr *MockKernelInterfaceMockRecorder) IsUbuntuSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUbuntuSystem", reflect.TypeOf((*MockKernelInterface)(nil).IsUbuntuSystem))
}

// LoadKernelModule mocks base method.
func (m *MockKernelInterface) LoadKernelModule(name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadKernelModule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockKernelInterfaceMockRecorder) LoadKernelModule(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockKernelInterface)(nil).LoadKernelModule), varargs...)
}

// RdmaIsLoaded mocks base method.
func (m *MockKernelInterface) RdmaIsLoaded() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RdmaIsLoaded")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaIsLoaded indicates an expected call of RdmaIsLoaded.
func (mr *MockKernelInterfaceMockRecorder) RdmaIsLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaIsLoaded", reflect.TypeOf((*MockKernelInterface)(nil).RdmaIsLoaded))
}

// RebindVfToDefaultDriver mocks base method.
func (m *MockKernelInterface) RebindVfToDefaultDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebindVfToDefaultDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebindVfToDefaultDriver indicates an expected call of RebindVfToDefaultDriver.
func (mr *MockKernelInterfaceMockRecorder) RebindVfToDefaultDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebindVfToDefaultDriver", reflect.TypeOf((*MockKernelInterface)(nil).RebindVfToDefaultDriver), arg0)
}

// ReloadDriver mocks base method.
func (m *MockKernelInterface) ReloadDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadDriver indicates an expected call of ReloadDriver.
func (mr *MockKernelInterfaceMockRecorder) ReloadDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadDriver", reflect.TypeOf((*MockKernelInterface)(nil).ReloadDriver), arg0)
}

// TriggerUdevEvent mocks base method.
func (m *MockKernelInterface) TriggerUdevEvent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerUdevEvent")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerUdevEvent indicates an expected call of TriggerUdevEvent.
func (mr *MockKernelInterfaceMockRecorder) TriggerUdevEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerUdevEvent", reflect.TypeOf((*MockKernelInterface)(nil).TriggerUdevEvent))
}

// TryEnableRdma mocks base method.
func (m *MockKernelInterface) TryEnableRdma() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryEnableRdma")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryEnableRdma indicates an expected call of TryEnableRdma.
func (mr *MockKernelInterfaceMockRecorder) TryEnableRdma() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableRdma", reflect.TypeOf((*MockKernelInterface)(nil).TryEnableRdma))
}

// TryEnableTun mocks base method.
func (m *MockKernelInterface) TryEnableTun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableTun")
}

// TryEnableTun indicates an expected call of TryEnableTun.
func (mr *MockKernelInterfaceMockRecorder) TryEnableTun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableTun", reflect.TypeOf((*MockKernelInterface)(nil).TryEnableTun))
}

// TryEnableVhostNet mocks base method.
func (m *MockKernelInterface) TryEnableVhostNet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableVhostNet")
}

// TryEnableVhostNet indicates an expected call of TryEnableVhostNet.
func (mr *MockKernelInterfaceMockRecorder) TryEnableVhostNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableVhostNet", reflect.TypeOf((*MockKernelInterface)(nil).TryEnableVhostNet))
}

// Unbind mocks base method.
func (m *MockKernelInterface) Unbind(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unbind indicates an expected call of Unbind.
func (mr *MockKernelInterfaceMockRecorder) Unbind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockKernelInterface)(nil).Unbind), arg0)
}

// UnbindDriverByBusAndDevice mocks base method.
func (m *MockKernelInterface) UnbindDriverByBusAndDevice(bus, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverByBusAndDevice", bus, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverByBusAndDevice indicates an expected call of UnbindDriverByBusAndDevice.
func (mr *MockKernelInterfaceMockRecorder) UnbindDriverByBusAndDevice(bus, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverByBusAndDevice", reflect.TypeOf((*MockKernelInterface)(nil).UnbindDriverByBusAndDevice), bus, device)
}

// UnbindDriverIfNeeded mocks base method.
func (m *MockKernelInterface) UnbindDriverIfNeeded(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverIfNeeded", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverIfNeeded indicates an expected call of UnbindDriverIfNeeded.
func (mr *MockKernelInterfaceMockRecorder) UnbindDriverIfNeeded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverIfNeeded", reflect.TypeOf((*MockKernelInterface)(nil).UnbindDriverIfNeeded), arg0, arg1)
}
