// Code generated by MockGen. DO NOT EDIT.
// Source: govdpa.go

// Package mock_govdpa is a generated GoMock package.
package mock_govdpa

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kvdpa "github.com/k8snetworkplumbingwg/govdpa/pkg/kvdpa"
	govdpa "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/host/internal/lib/govdpa"
)

// MockVdpaDevice is a mock of VdpaDevice interface.
type MockVdpaDevice struct {
	ctrl     *gomock.Controller
	recorder *MockVdpaDeviceMockRecorder
}

// MockVdpaDeviceMockRecorder is the mock recorder for MockVdpaDevice.
type MockVdpaDeviceMockRecorder struct {
	mock *MockVdpaDevice
}

// NewMockVdpaDevice creates a new mock instance.
func NewMockVdpaDevice(ctrl *gomock.Controller) *MockVdpaDevice {
	mock := &MockVdpaDevice{ctrl: ctrl}
	mock.recorder = &MockVdpaDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVdpaDevice) EXPECT() *MockVdpaDeviceMockRecorder {
	return m.recorder
}

// Driver mocks base method.
func (m *MockVdpaDevice) Driver() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(string)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockVdpaDeviceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockVdpaDevice)(nil).Driver))
}

// MgmtDev mocks base method.
func (m *MockVdpaDevice) MgmtDev() kvdpa.MgmtDev {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MgmtDev")
	ret0, _ := ret[0].(kvdpa.MgmtDev)
	return ret0
}

// MgmtDev indicates an expected call of MgmtDev.
func (mr *MockVdpaDeviceMockRecorder) MgmtDev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MgmtDev", reflect.TypeOf((*MockVdpaDevice)(nil).MgmtDev))
}

// Name mocks base method.
func (m *MockVdpaDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVdpaDeviceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVdpaDevice)(nil).Name))
}

// ParentDevicePath mocks base method.
func (m *MockVdpaDevice) ParentDevicePath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentDevicePath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParentDevicePath indicates an expected call of ParentDevicePath.
func (mr *MockVdpaDeviceMockRecorder) ParentDevicePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentDevicePath", reflect.TypeOf((*MockVdpaDevice)(nil).ParentDevicePath))
}

// VhostVdpa mocks base method.
func (m *MockVdpaDevice) VhostVdpa() kvdpa.VhostVdpa {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VhostVdpa")
	ret0, _ := ret[0].(kvdpa.VhostVdpa)
	return ret0
}

// VhostVdpa indicates an expected call of VhostVdpa.
func (mr *MockVdpaDeviceMockRecorder) VhostVdpa() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VhostVdpa", reflect.TypeOf((*MockVdpaDevice)(nil).VhostVdpa))
}

// VirtioNet mocks base method.
func (m *MockVdpaDevice) VirtioNet() kvdpa.VirtioNet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtioNet")
	ret0, _ := ret[0].(kvdpa.VirtioNet)
	return ret0
}

// VirtioNet indicates an expected call of VirtioNet.
func (mr *MockVdpaDeviceMockRecorder) VirtioNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtioNet", reflect.TypeOf((*MockVdpaDevice)(nil).VirtioNet))
}

// MockGoVdpaLib is a mock of GoVdpaLib interface.
type MockGoVdpaLib struct {
	ctrl     *gomock.Controller
	recorder *MockGoVdpaLibMockRecorder
}

// MockGoVdpaLibMockRecorder is the mock recorder for MockGoVdpaLib.
type MockGoVdpaLibMockRecorder struct {
	mock *MockGoVdpaLib
}

// NewMockGoVdpaLib creates a new mock instance.
func NewMockGoVdpaLib(ctrl *gomock.Controller) *MockGoVdpaLib {
	mock := &MockGoVdpaLib{ctrl: ctrl}
	mock.recorder = &MockGoVdpaLibMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoVdpaLib) EXPECT() *MockGoVdpaLibMockRecorder {
	return m.recorder
}

// AddVdpaDevice mocks base method.
func (m *MockGoVdpaLib) AddVdpaDevice(mgmtDeviceName, vdpaDeviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVdpaDevice", mgmtDeviceName, vdpaDeviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVdpaDevice indicates an expected call of AddVdpaDevice.
func (mr *MockGoVdpaLibMockRecorder) AddVdpaDevice(mgmtDeviceName, vdpaDeviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVdpaDevice", reflect.TypeOf((*MockGoVdpaLib)(nil).AddVdpaDevice), mgmtDeviceName, vdpaDeviceName)
}

// DeleteVdpaDevice mocks base method.
func (m *MockGoVdpaLib) DeleteVdpaDevice(vdpaDeviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVdpaDevice", vdpaDeviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVdpaDevice indicates an expected call of DeleteVdpaDevice.
func (mr *MockGoVdpaLibMockRecorder) DeleteVdpaDevice(vdpaDeviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVdpaDevice", reflect.TypeOf((*MockGoVdpaLib)(nil).DeleteVdpaDevice), vdpaDeviceName)
}

// GetVdpaDevice mocks base method.
func (m *MockGoVdpaLib) GetVdpaDevice(vdpaDeviceName string) (govdpa.VdpaDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVdpaDevice", vdpaDeviceName)
	ret0, _ := ret[0].(govdpa.VdpaDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVdpaDevice indicates an expected call of GetVdpaDevice.
func (mr *MockGoVdpaLibMockRecorder) GetVdpaDevice(vdpaDeviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVdpaDevice", reflect.TypeOf((*MockGoVdpaLib)(nil).GetVdpaDevice), vdpaDeviceName)
}
