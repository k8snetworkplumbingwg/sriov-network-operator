// Code generated by MockGen. DO NOT EDIT.
// Source: host.go

// Package mock_helper is a generated GoMock package.
package mock_helper

import (
	reflect "reflect"

	unit "github.com/coreos/go-systemd/v22/unit"
	gomock "github.com/golang/mock/gomock"
	ghw "github.com/jaypipes/ghw"
	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
	host "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/host"
	mlxutils "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/vendors/mellanox"
	netlink "github.com/vishvananda/netlink"
)

// MockHostHelpersInterface is a mock of HostHelpersInterface interface.
type MockHostHelpersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHostHelpersInterfaceMockRecorder
}

// MockHostHelpersInterfaceMockRecorder is the mock recorder for MockHostHelpersInterface.
type MockHostHelpersInterfaceMockRecorder struct {
	mock *MockHostHelpersInterface
}

// NewMockHostHelpersInterface creates a new mock instance.
func NewMockHostHelpersInterface(ctrl *gomock.Controller) *MockHostHelpersInterface {
	mock := &MockHostHelpersInterface{ctrl: ctrl}
	mock.recorder = &MockHostHelpersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostHelpersInterface) EXPECT() *MockHostHelpersInterfaceMockRecorder {
	return m.recorder
}

// AddUdevRule mocks base method.
func (m *MockHostHelpersInterface) AddUdevRule(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUdevRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUdevRule indicates an expected call of AddUdevRule.
func (mr *MockHostHelpersInterfaceMockRecorder) AddUdevRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUdevRule", reflect.TypeOf((*MockHostHelpersInterface)(nil).AddUdevRule), arg0)
}

// BindDefaultDriver mocks base method.
func (m *MockHostHelpersInterface) BindDefaultDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDefaultDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDefaultDriver indicates an expected call of BindDefaultDriver.
func (mr *MockHostHelpersInterfaceMockRecorder) BindDefaultDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDefaultDriver", reflect.TypeOf((*MockHostHelpersInterface)(nil).BindDefaultDriver), arg0)
}

// BindDpdkDriver mocks base method.
func (m *MockHostHelpersInterface) BindDpdkDriver(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDpdkDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDpdkDriver indicates an expected call of BindDpdkDriver.
func (mr *MockHostHelpersInterfaceMockRecorder) BindDpdkDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDpdkDriver", reflect.TypeOf((*MockHostHelpersInterface)(nil).BindDpdkDriver), arg0, arg1)
}

// BindDriverByBusAndDevice mocks base method.
func (m *MockHostHelpersInterface) BindDriverByBusAndDevice(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindDriverByBusAndDevice", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindDriverByBusAndDevice indicates an expected call of BindDriverByBusAndDevice.
func (mr *MockHostHelpersInterfaceMockRecorder) BindDriverByBusAndDevice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindDriverByBusAndDevice", reflect.TypeOf((*MockHostHelpersInterface)(nil).BindDriverByBusAndDevice), arg0, arg1, arg2)
}

// Chroot mocks base method.
func (m *MockHostHelpersInterface) Chroot(arg0 string) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chroot", arg0)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chroot indicates an expected call of Chroot.
func (mr *MockHostHelpersInterfaceMockRecorder) Chroot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chroot", reflect.TypeOf((*MockHostHelpersInterface)(nil).Chroot), arg0)
}

// ClearPCIAddressFolder mocks base method.
func (m *MockHostHelpersInterface) ClearPCIAddressFolder() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearPCIAddressFolder")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearPCIAddressFolder indicates an expected call of ClearPCIAddressFolder.
func (mr *MockHostHelpersInterfaceMockRecorder) ClearPCIAddressFolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearPCIAddressFolder", reflect.TypeOf((*MockHostHelpersInterface)(nil).ClearPCIAddressFolder))
}

// CompareServices mocks base method.
func (m *MockHostHelpersInterface) CompareServices(serviceA, serviceB *host.Service) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareServices", serviceA, serviceB)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareServices indicates an expected call of CompareServices.
func (mr *MockHostHelpersInterfaceMockRecorder) CompareServices(serviceA, serviceB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareServices", reflect.TypeOf((*MockHostHelpersInterface)(nil).CompareServices), serviceA, serviceB)
}

// ConfigSriovDevice mocks base method.
func (m *MockHostHelpersInterface) ConfigSriovDevice(iface *v1.Interface, ifaceStatus *v1.InterfaceExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovDevice", iface, ifaceStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovDevice indicates an expected call of ConfigSriovDevice.
func (mr *MockHostHelpersInterfaceMockRecorder) ConfigSriovDevice(iface, ifaceStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovDevice", reflect.TypeOf((*MockHostHelpersInterface)(nil).ConfigSriovDevice), iface, ifaceStatus)
}

// ConfigSriovDeviceVirtual mocks base method.
func (m *MockHostHelpersInterface) ConfigSriovDeviceVirtual(iface *v1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovDeviceVirtual", iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovDeviceVirtual indicates an expected call of ConfigSriovDeviceVirtual.
func (mr *MockHostHelpersInterfaceMockRecorder) ConfigSriovDeviceVirtual(iface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovDeviceVirtual", reflect.TypeOf((*MockHostHelpersInterface)(nil).ConfigSriovDeviceVirtual), iface)
}

// ConfigSriovInterfaces mocks base method.
func (m *MockHostHelpersInterface) ConfigSriovInterfaces(arg0 host.StoreManagerInterface, arg1 []v1.Interface, arg2 []v1.InterfaceExt, arg3 map[string]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSriovInterfaces", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigSriovInterfaces indicates an expected call of ConfigSriovInterfaces.
func (mr *MockHostHelpersInterfaceMockRecorder) ConfigSriovInterfaces(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSriovInterfaces", reflect.TypeOf((*MockHostHelpersInterface)(nil).ConfigSriovInterfaces), arg0, arg1, arg2, arg3)
}

// DiscoverSriovDevices mocks base method.
func (m *MockHostHelpersInterface) DiscoverSriovDevices(arg0 host.StoreManagerInterface) ([]v1.InterfaceExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSriovDevices", arg0)
	ret0, _ := ret[0].([]v1.InterfaceExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSriovDevices indicates an expected call of DiscoverSriovDevices.
func (mr *MockHostHelpersInterfaceMockRecorder) DiscoverSriovDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSriovDevices", reflect.TypeOf((*MockHostHelpersInterface)(nil).DiscoverSriovDevices), arg0)
}

// EnableRDMA mocks base method.
func (m *MockHostHelpersInterface) EnableRDMA(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMA", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMA indicates an expected call of EnableRDMA.
func (mr *MockHostHelpersInterfaceMockRecorder) EnableRDMA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMA", reflect.TypeOf((*MockHostHelpersInterface)(nil).EnableRDMA), arg0, arg1, arg2)
}

// EnableRDMAOnRHELMachine mocks base method.
func (m *MockHostHelpersInterface) EnableRDMAOnRHELMachine() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMAOnRHELMachine")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMAOnRHELMachine indicates an expected call of EnableRDMAOnRHELMachine.
func (mr *MockHostHelpersInterfaceMockRecorder) EnableRDMAOnRHELMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMAOnRHELMachine", reflect.TypeOf((*MockHostHelpersInterface)(nil).EnableRDMAOnRHELMachine))
}

// EnableService mocks base method.
func (m *MockHostHelpersInterface) EnableService(service *host.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableService", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableService indicates an expected call of EnableService.
func (mr *MockHostHelpersInterfaceMockRecorder) EnableService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableService", reflect.TypeOf((*MockHostHelpersInterface)(nil).EnableService), service)
}

// GetCheckPointNodeState mocks base method.
func (m *MockHostHelpersInterface) GetCheckPointNodeState() (*v1.SriovNetworkNodeState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckPointNodeState")
	ret0, _ := ret[0].(*v1.SriovNetworkNodeState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckPointNodeState indicates an expected call of GetCheckPointNodeState.
func (mr *MockHostHelpersInterfaceMockRecorder) GetCheckPointNodeState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckPointNodeState", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetCheckPointNodeState))
}

// GetCurrentKernelArgs mocks base method.
func (m *MockHostHelpersInterface) GetCurrentKernelArgs() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKernelArgs")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKernelArgs indicates an expected call of GetCurrentKernelArgs.
func (mr *MockHostHelpersInterfaceMockRecorder) GetCurrentKernelArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKernelArgs", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetCurrentKernelArgs))
}

// GetLinkType mocks base method.
func (m *MockHostHelpersInterface) GetLinkType(arg0 v1.InterfaceExt) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkType", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLinkType indicates an expected call of GetLinkType.
func (mr *MockHostHelpersInterfaceMockRecorder) GetLinkType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkType", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetLinkType), arg0)
}

// GetMellanoxBlueFieldMode mocks base method.
func (m *MockHostHelpersInterface) GetMellanoxBlueFieldMode(arg0 string) (mlxutils.BlueFieldMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMellanoxBlueFieldMode", arg0)
	ret0, _ := ret[0].(mlxutils.BlueFieldMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMellanoxBlueFieldMode indicates an expected call of GetMellanoxBlueFieldMode.
func (mr *MockHostHelpersInterfaceMockRecorder) GetMellanoxBlueFieldMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMellanoxBlueFieldMode", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetMellanoxBlueFieldMode), arg0)
}

// GetMlxNicFwData mocks base method.
func (m *MockHostHelpersInterface) GetMlxNicFwData(pciAddress string) (*mlxutils.MlxNic, *mlxutils.MlxNic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMlxNicFwData", pciAddress)
	ret0, _ := ret[0].(*mlxutils.MlxNic)
	ret1, _ := ret[1].(*mlxutils.MlxNic)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMlxNicFwData indicates an expected call of GetMlxNicFwData.
func (mr *MockHostHelpersInterfaceMockRecorder) GetMlxNicFwData(pciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlxNicFwData", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetMlxNicFwData), pciAddress)
}

// GetNetDevLinkSpeed mocks base method.
func (m *MockHostHelpersInterface) GetNetDevLinkSpeed(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevLinkSpeed", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevLinkSpeed indicates an expected call of GetNetDevLinkSpeed.
func (mr *MockHostHelpersInterfaceMockRecorder) GetNetDevLinkSpeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevLinkSpeed", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetNetDevLinkSpeed), arg0)
}

// GetNetDevMac mocks base method.
func (m *MockHostHelpersInterface) GetNetDevMac(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetDevMac", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetDevMac indicates an expected call of GetNetDevMac.
func (mr *MockHostHelpersInterfaceMockRecorder) GetNetDevMac(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetDevMac", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetNetDevMac), arg0)
}

// GetNetdevMTU mocks base method.
func (m *MockHostHelpersInterface) GetNetdevMTU(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetdevMTU", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNetdevMTU indicates an expected call of GetNetdevMTU.
func (mr *MockHostHelpersInterfaceMockRecorder) GetNetdevMTU(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetdevMTU", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetNetdevMTU), arg0)
}

// GetNicSriovMode mocks base method.
func (m *MockHostHelpersInterface) GetNicSriovMode(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNicSriovMode", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNicSriovMode indicates an expected call of GetNicSriovMode.
func (mr *MockHostHelpersInterfaceMockRecorder) GetNicSriovMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNicSriovMode", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetNicSriovMode), arg0)
}

// GetOSPrettyName mocks base method.
func (m *MockHostHelpersInterface) GetOSPrettyName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSPrettyName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSPrettyName indicates an expected call of GetOSPrettyName.
func (mr *MockHostHelpersInterfaceMockRecorder) GetOSPrettyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSPrettyName", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetOSPrettyName))
}

// GetPhysPortName mocks base method.
func (m *MockHostHelpersInterface) GetPhysPortName(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysPortName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhysPortName indicates an expected call of GetPhysPortName.
func (mr *MockHostHelpersInterfaceMockRecorder) GetPhysPortName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysPortName", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetPhysPortName), arg0)
}

// GetPhysSwitchID mocks base method.
func (m *MockHostHelpersInterface) GetPhysSwitchID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhysSwitchID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhysSwitchID indicates an expected call of GetPhysSwitchID.
func (mr *MockHostHelpersInterfaceMockRecorder) GetPhysSwitchID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhysSwitchID", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetPhysSwitchID), arg0)
}

// GetVfInfo mocks base method.
func (m *MockHostHelpersInterface) GetVfInfo(arg0 string, arg1 []*ghw.PCIDevice) v1.VirtualFunction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVfInfo", arg0, arg1)
	ret0, _ := ret[0].(v1.VirtualFunction)
	return ret0
}

// GetVfInfo indicates an expected call of GetVfInfo.
func (mr *MockHostHelpersInterfaceMockRecorder) GetVfInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVfInfo", reflect.TypeOf((*MockHostHelpersInterface)(nil).GetVfInfo), arg0, arg1)
}

// HasDriver mocks base method.
func (m *MockHostHelpersInterface) HasDriver(arg0 string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDriver", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// HasDriver indicates an expected call of HasDriver.
func (mr *MockHostHelpersInterfaceMockRecorder) HasDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDriver", reflect.TypeOf((*MockHostHelpersInterface)(nil).HasDriver), arg0)
}

// InstallRDMA mocks base method.
func (m *MockHostHelpersInterface) InstallRDMA(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallRDMA", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallRDMA indicates an expected call of InstallRDMA.
func (mr *MockHostHelpersInterfaceMockRecorder) InstallRDMA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallRDMA", reflect.TypeOf((*MockHostHelpersInterface)(nil).InstallRDMA), arg0)
}

// IsCoreOS mocks base method.
func (m *MockHostHelpersInterface) IsCoreOS() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCoreOS")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCoreOS indicates an expected call of IsCoreOS.
func (mr *MockHostHelpersInterfaceMockRecorder) IsCoreOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCoreOS", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsCoreOS))
}

// IsKernelArgsSet mocks base method.
func (m *MockHostHelpersInterface) IsKernelArgsSet(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelArgsSet", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelArgsSet indicates an expected call of IsKernelArgsSet.
func (mr *MockHostHelpersInterfaceMockRecorder) IsKernelArgsSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelArgsSet", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsKernelArgsSet), arg0, arg1)
}

// IsKernelLockdownMode mocks base method.
func (m *MockHostHelpersInterface) IsKernelLockdownMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelLockdownMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKernelLockdownMode indicates an expected call of IsKernelLockdownMode.
func (mr *MockHostHelpersInterfaceMockRecorder) IsKernelLockdownMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelLockdownMode", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsKernelLockdownMode))
}

// IsKernelModuleLoaded mocks base method.
func (m *MockHostHelpersInterface) IsKernelModuleLoaded(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelModuleLoaded", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKernelModuleLoaded indicates an expected call of IsKernelModuleLoaded.
func (mr *MockHostHelpersInterfaceMockRecorder) IsKernelModuleLoaded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelModuleLoaded", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsKernelModuleLoaded), arg0)
}

// IsRHELSystem mocks base method.
func (m *MockHostHelpersInterface) IsRHELSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRHELSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRHELSystem indicates an expected call of IsRHELSystem.
func (mr *MockHostHelpersInterfaceMockRecorder) IsRHELSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRHELSystem", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsRHELSystem))
}

// IsServiceEnabled mocks base method.
func (m *MockHostHelpersInterface) IsServiceEnabled(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceEnabled", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceEnabled indicates an expected call of IsServiceEnabled.
func (mr *MockHostHelpersInterfaceMockRecorder) IsServiceEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceEnabled", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsServiceEnabled), arg0)
}

// IsServiceExist mocks base method.
func (m *MockHostHelpersInterface) IsServiceExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServiceExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServiceExist indicates an expected call of IsServiceExist.
func (mr *MockHostHelpersInterfaceMockRecorder) IsServiceExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServiceExist", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsServiceExist), arg0)
}

// IsSwitchdev mocks base method.
func (m *MockHostHelpersInterface) IsSwitchdev(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSwitchdev", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSwitchdev indicates an expected call of IsSwitchdev.
func (mr *MockHostHelpersInterfaceMockRecorder) IsSwitchdev(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSwitchdev", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsSwitchdev), arg0)
}

// IsUbuntuSystem mocks base method.
func (m *MockHostHelpersInterface) IsUbuntuSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUbuntuSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUbuntuSystem indicates an expected call of IsUbuntuSystem.
func (mr *MockHostHelpersInterfaceMockRecorder) IsUbuntuSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUbuntuSystem", reflect.TypeOf((*MockHostHelpersInterface)(nil).IsUbuntuSystem))
}

// LoadKernelModule mocks base method.
func (m *MockHostHelpersInterface) LoadKernelModule(name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadKernelModule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockHostHelpersInterfaceMockRecorder) LoadKernelModule(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockHostHelpersInterface)(nil).LoadKernelModule), varargs...)
}

// LoadPfsStatus mocks base method.
func (m *MockHostHelpersInterface) LoadPfsStatus(pciAddress string) (*v1.Interface, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPfsStatus", pciAddress)
	ret0, _ := ret[0].(*v1.Interface)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadPfsStatus indicates an expected call of LoadPfsStatus.
func (mr *MockHostHelpersInterfaceMockRecorder) LoadPfsStatus(pciAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPfsStatus", reflect.TypeOf((*MockHostHelpersInterface)(nil).LoadPfsStatus), pciAddress)
}

// MlxConfigFW mocks base method.
func (m *MockHostHelpersInterface) MlxConfigFW(attributesToChange map[string]mlxutils.MlxNic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MlxConfigFW", attributesToChange)
	ret0, _ := ret[0].(error)
	return ret0
}

// MlxConfigFW indicates an expected call of MlxConfigFW.
func (mr *MockHostHelpersInterfaceMockRecorder) MlxConfigFW(attributesToChange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MlxConfigFW", reflect.TypeOf((*MockHostHelpersInterface)(nil).MlxConfigFW), attributesToChange)
}

// MstConfigReadData mocks base method.
func (m *MockHostHelpersInterface) MstConfigReadData(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MstConfigReadData", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MstConfigReadData indicates an expected call of MstConfigReadData.
func (mr *MockHostHelpersInterfaceMockRecorder) MstConfigReadData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MstConfigReadData", reflect.TypeOf((*MockHostHelpersInterface)(nil).MstConfigReadData), arg0)
}

// PrepareNMUdevRule mocks base method.
func (m *MockHostHelpersInterface) PrepareNMUdevRule(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNMUdevRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareNMUdevRule indicates an expected call of PrepareNMUdevRule.
func (mr *MockHostHelpersInterfaceMockRecorder) PrepareNMUdevRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNMUdevRule", reflect.TypeOf((*MockHostHelpersInterface)(nil).PrepareNMUdevRule), arg0)
}

// RdmaIsLoaded mocks base method.
func (m *MockHostHelpersInterface) RdmaIsLoaded() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RdmaIsLoaded")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaIsLoaded indicates an expected call of RdmaIsLoaded.
func (mr *MockHostHelpersInterfaceMockRecorder) RdmaIsLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaIsLoaded", reflect.TypeOf((*MockHostHelpersInterface)(nil).RdmaIsLoaded))
}

// ReadScriptManifestFile mocks base method.
func (m *MockHostHelpersInterface) ReadScriptManifestFile(path string) (*host.ScriptManifestFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadScriptManifestFile", path)
	ret0, _ := ret[0].(*host.ScriptManifestFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadScriptManifestFile indicates an expected call of ReadScriptManifestFile.
func (mr *MockHostHelpersInterfaceMockRecorder) ReadScriptManifestFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadScriptManifestFile", reflect.TypeOf((*MockHostHelpersInterface)(nil).ReadScriptManifestFile), path)
}

// ReadService mocks base method.
func (m *MockHostHelpersInterface) ReadService(arg0 string) (*host.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadService", arg0)
	ret0, _ := ret[0].(*host.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService.
func (mr *MockHostHelpersInterfaceMockRecorder) ReadService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockHostHelpersInterface)(nil).ReadService), arg0)
}

// ReadServiceInjectionManifestFile mocks base method.
func (m *MockHostHelpersInterface) ReadServiceInjectionManifestFile(path string) (*host.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceInjectionManifestFile", path)
	ret0, _ := ret[0].(*host.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceInjectionManifestFile indicates an expected call of ReadServiceInjectionManifestFile.
func (mr *MockHostHelpersInterfaceMockRecorder) ReadServiceInjectionManifestFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceInjectionManifestFile", reflect.TypeOf((*MockHostHelpersInterface)(nil).ReadServiceInjectionManifestFile), path)
}

// ReadServiceManifestFile mocks base method.
func (m *MockHostHelpersInterface) ReadServiceManifestFile(path string) (*host.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadServiceManifestFile", path)
	ret0, _ := ret[0].(*host.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceManifestFile indicates an expected call of ReadServiceManifestFile.
func (mr *MockHostHelpersInterfaceMockRecorder) ReadServiceManifestFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceManifestFile", reflect.TypeOf((*MockHostHelpersInterface)(nil).ReadServiceManifestFile), path)
}

// RebindVfToDefaultDriver mocks base method.
func (m *MockHostHelpersInterface) RebindVfToDefaultDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebindVfToDefaultDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebindVfToDefaultDriver indicates an expected call of RebindVfToDefaultDriver.
func (mr *MockHostHelpersInterfaceMockRecorder) RebindVfToDefaultDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebindVfToDefaultDriver", reflect.TypeOf((*MockHostHelpersInterface)(nil).RebindVfToDefaultDriver), arg0)
}

// ReloadDriver mocks base method.
func (m *MockHostHelpersInterface) ReloadDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadDriver indicates an expected call of ReloadDriver.
func (mr *MockHostHelpersInterfaceMockRecorder) ReloadDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadDriver", reflect.TypeOf((*MockHostHelpersInterface)(nil).ReloadDriver), arg0)
}

// RemoveFromService mocks base method.
func (m *MockHostHelpersInterface) RemoveFromService(service *host.Service, options ...*unit.UnitOption) (*host.Service, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{service}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFromService", varargs...)
	ret0, _ := ret[0].(*host.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromService indicates an expected call of RemoveFromService.
func (mr *MockHostHelpersInterfaceMockRecorder) RemoveFromService(service interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{service}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromService", reflect.TypeOf((*MockHostHelpersInterface)(nil).RemoveFromService), varargs...)
}

// RemoveUdevRule mocks base method.
func (m *MockHostHelpersInterface) RemoveUdevRule(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUdevRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUdevRule indicates an expected call of RemoveUdevRule.
func (mr *MockHostHelpersInterfaceMockRecorder) RemoveUdevRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUdevRule", reflect.TypeOf((*MockHostHelpersInterface)(nil).RemoveUdevRule), arg0)
}

// ResetSriovDevice mocks base method.
func (m *MockHostHelpersInterface) ResetSriovDevice(arg0 v1.InterfaceExt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSriovDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetSriovDevice indicates an expected call of ResetSriovDevice.
func (mr *MockHostHelpersInterfaceMockRecorder) ResetSriovDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSriovDevice", reflect.TypeOf((*MockHostHelpersInterface)(nil).ResetSriovDevice), arg0)
}

// RunCommand mocks base method.
func (m *MockHostHelpersInterface) RunCommand(arg0 string, arg1 ...string) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunCommand", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockHostHelpersInterfaceMockRecorder) RunCommand(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockHostHelpersInterface)(nil).RunCommand), varargs...)
}

// SaveLastPfAppliedStatus mocks base method.
func (m *MockHostHelpersInterface) SaveLastPfAppliedStatus(PfInfo *v1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLastPfAppliedStatus", PfInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLastPfAppliedStatus indicates an expected call of SaveLastPfAppliedStatus.
func (mr *MockHostHelpersInterfaceMockRecorder) SaveLastPfAppliedStatus(PfInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLastPfAppliedStatus", reflect.TypeOf((*MockHostHelpersInterface)(nil).SaveLastPfAppliedStatus), PfInfo)
}

// SetNetdevMTU mocks base method.
func (m *MockHostHelpersInterface) SetNetdevMTU(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNetdevMTU", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNetdevMTU indicates an expected call of SetNetdevMTU.
func (mr *MockHostHelpersInterfaceMockRecorder) SetNetdevMTU(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNetdevMTU", reflect.TypeOf((*MockHostHelpersInterface)(nil).SetNetdevMTU), arg0, arg1)
}

// SetSriovNumVfs mocks base method.
func (m *MockHostHelpersInterface) SetSriovNumVfs(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSriovNumVfs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSriovNumVfs indicates an expected call of SetSriovNumVfs.
func (mr *MockHostHelpersInterfaceMockRecorder) SetSriovNumVfs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSriovNumVfs", reflect.TypeOf((*MockHostHelpersInterface)(nil).SetSriovNumVfs), arg0, arg1)
}

// SetVfAdminMac mocks base method.
func (m *MockHostHelpersInterface) SetVfAdminMac(arg0 string, arg1, arg2 netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVfAdminMac", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVfAdminMac indicates an expected call of SetVfAdminMac.
func (mr *MockHostHelpersInterfaceMockRecorder) SetVfAdminMac(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVfAdminMac", reflect.TypeOf((*MockHostHelpersInterface)(nil).SetVfAdminMac), arg0, arg1, arg2)
}

// SetVfGUID mocks base method.
func (m *MockHostHelpersInterface) SetVfGUID(arg0 string, arg1 netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVfGUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVfGUID indicates an expected call of SetVfGUID.
func (mr *MockHostHelpersInterfaceMockRecorder) SetVfGUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVfGUID", reflect.TypeOf((*MockHostHelpersInterface)(nil).SetVfGUID), arg0, arg1)
}

// TriggerUdevEvent mocks base method.
func (m *MockHostHelpersInterface) TriggerUdevEvent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerUdevEvent")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerUdevEvent indicates an expected call of TriggerUdevEvent.
func (mr *MockHostHelpersInterfaceMockRecorder) TriggerUdevEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerUdevEvent", reflect.TypeOf((*MockHostHelpersInterface)(nil).TriggerUdevEvent))
}

// TryEnableRdma mocks base method.
func (m *MockHostHelpersInterface) TryEnableRdma() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryEnableRdma")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryEnableRdma indicates an expected call of TryEnableRdma.
func (mr *MockHostHelpersInterfaceMockRecorder) TryEnableRdma() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableRdma", reflect.TypeOf((*MockHostHelpersInterface)(nil).TryEnableRdma))
}

// TryEnableTun mocks base method.
func (m *MockHostHelpersInterface) TryEnableTun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableTun")
}

// TryEnableTun indicates an expected call of TryEnableTun.
func (mr *MockHostHelpersInterfaceMockRecorder) TryEnableTun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableTun", reflect.TypeOf((*MockHostHelpersInterface)(nil).TryEnableTun))
}

// TryEnableVhostNet mocks base method.
func (m *MockHostHelpersInterface) TryEnableVhostNet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableVhostNet")
}

// TryEnableVhostNet indicates an expected call of TryEnableVhostNet.
func (mr *MockHostHelpersInterfaceMockRecorder) TryEnableVhostNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableVhostNet", reflect.TypeOf((*MockHostHelpersInterface)(nil).TryEnableVhostNet))
}

// TryGetInterfaceName mocks base method.
func (m *MockHostHelpersInterface) TryGetInterfaceName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryGetInterfaceName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryGetInterfaceName indicates an expected call of TryGetInterfaceName.
func (mr *MockHostHelpersInterfaceMockRecorder) TryGetInterfaceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryGetInterfaceName", reflect.TypeOf((*MockHostHelpersInterface)(nil).TryGetInterfaceName), arg0)
}

// TryToGetVirtualInterfaceName mocks base method.
func (m *MockHostHelpersInterface) TryToGetVirtualInterfaceName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToGetVirtualInterfaceName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TryToGetVirtualInterfaceName indicates an expected call of TryToGetVirtualInterfaceName.
func (mr *MockHostHelpersInterfaceMockRecorder) TryToGetVirtualInterfaceName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToGetVirtualInterfaceName", reflect.TypeOf((*MockHostHelpersInterface)(nil).TryToGetVirtualInterfaceName), arg0)
}

// Unbind mocks base method.
func (m *MockHostHelpersInterface) Unbind(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unbind indicates an expected call of Unbind.
func (mr *MockHostHelpersInterfaceMockRecorder) Unbind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockHostHelpersInterface)(nil).Unbind), arg0)
}

// UnbindDriverByBusAndDevice mocks base method.
func (m *MockHostHelpersInterface) UnbindDriverByBusAndDevice(bus, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverByBusAndDevice", bus, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverByBusAndDevice indicates an expected call of UnbindDriverByBusAndDevice.
func (mr *MockHostHelpersInterfaceMockRecorder) UnbindDriverByBusAndDevice(bus, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverByBusAndDevice", reflect.TypeOf((*MockHostHelpersInterface)(nil).UnbindDriverByBusAndDevice), bus, device)
}

// UnbindDriverIfNeeded mocks base method.
func (m *MockHostHelpersInterface) UnbindDriverIfNeeded(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindDriverIfNeeded", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindDriverIfNeeded indicates an expected call of UnbindDriverIfNeeded.
func (mr *MockHostHelpersInterfaceMockRecorder) UnbindDriverIfNeeded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindDriverIfNeeded", reflect.TypeOf((*MockHostHelpersInterface)(nil).UnbindDriverIfNeeded), arg0, arg1)
}

// UpdateSystemService mocks base method.
func (m *MockHostHelpersInterface) UpdateSystemService(serviceObj *host.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemService", serviceObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSystemService indicates an expected call of UpdateSystemService.
func (mr *MockHostHelpersInterfaceMockRecorder) UpdateSystemService(serviceObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemService", reflect.TypeOf((*MockHostHelpersInterface)(nil).UpdateSystemService), serviceObj)
}

// VFIsReady mocks base method.
func (m *MockHostHelpersInterface) VFIsReady(arg0 string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VFIsReady", arg0)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VFIsReady indicates an expected call of VFIsReady.
func (mr *MockHostHelpersInterfaceMockRecorder) VFIsReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VFIsReady", reflect.TypeOf((*MockHostHelpersInterface)(nil).VFIsReady), arg0)
}

// WriteCheckpointFile mocks base method.
func (m *MockHostHelpersInterface) WriteCheckpointFile(arg0 *v1.SriovNetworkNodeState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCheckpointFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCheckpointFile indicates an expected call of WriteCheckpointFile.
func (mr *MockHostHelpersInterfaceMockRecorder) WriteCheckpointFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCheckpointFile", reflect.TypeOf((*MockHostHelpersInterface)(nil).WriteCheckpointFile), arg0)
}

// WriteSwitchdevConfFile mocks base method.
func (m *MockHostHelpersInterface) WriteSwitchdevConfFile(arg0 *v1.SriovNetworkNodeState, arg1 map[string]bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSwitchdevConfFile", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteSwitchdevConfFile indicates an expected call of WriteSwitchdevConfFile.
func (mr *MockHostHelpersInterfaceMockRecorder) WriteSwitchdevConfFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSwitchdevConfFile", reflect.TypeOf((*MockHostHelpersInterface)(nil).WriteSwitchdevConfFile), arg0, arg1)
}
