// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator.go
//
// Generated by this command:
//
//	mockgen -destination mock/mock_orchestrator.go -source orchestrator.go
//

// Package mock_orchestrator is a generated GoMock package.
package mock_orchestrator

import (
	context "context"
	reflect "reflect"

	consts "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/consts"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AfterCompleteDrainNode mocks base method.
func (m *MockInterface) AfterCompleteDrainNode(arg0 context.Context, arg1 *v1.Node) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterCompleteDrainNode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AfterCompleteDrainNode indicates an expected call of AfterCompleteDrainNode.
func (mr *MockInterfaceMockRecorder) AfterCompleteDrainNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterCompleteDrainNode", reflect.TypeOf((*MockInterface)(nil).AfterCompleteDrainNode), arg0, arg1)
}

// BeforeDrainNode mocks base method.
func (m *MockInterface) BeforeDrainNode(arg0 context.Context, arg1 *v1.Node) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeDrainNode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeDrainNode indicates an expected call of BeforeDrainNode.
func (mr *MockInterfaceMockRecorder) BeforeDrainNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDrainNode", reflect.TypeOf((*MockInterface)(nil).BeforeDrainNode), arg0, arg1)
}

// ClusterType mocks base method.
func (m *MockInterface) ClusterType() consts.ClusterType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterType")
	ret0, _ := ret[0].(consts.ClusterType)
	return ret0
}

// ClusterType indicates an expected call of ClusterType.
func (mr *MockInterfaceMockRecorder) ClusterType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterType", reflect.TypeOf((*MockInterface)(nil).ClusterType))
}

// Flavor mocks base method.
func (m *MockInterface) Flavor() consts.ClusterFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavor")
	ret0, _ := ret[0].(consts.ClusterFlavor)
	return ret0
}

// Flavor indicates an expected call of Flavor.
func (mr *MockInterfaceMockRecorder) Flavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavor", reflect.TypeOf((*MockInterface)(nil).Flavor))
}
